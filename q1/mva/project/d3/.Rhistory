df_pca$latitude <- NULL
df_pca$longitude <- NULL
#cor(df_pca)
# Removing strongly correlated and redundant variables
df_pca$calculated_host_listings_count_entire_homes <- NULL
df_pca$calculated_host_listings_count_private_rooms <- NULL
df_pca$calculated_host_listings_count_shared_rooms <- NULL
df_pca$review_scores_rating <- NULL
df_pca$review_scores_checkin <-NULL
df_pca$review_scores_accuracy <- NULL
df_pca$review_scores_cleanliness <-NULL
df_pca$review_scores_communication <- NULL
df_pca$review_scores_location <- NULL
df_pca$number_of_reviews_l30d <- NULL
df_pca$number_of_reviews_ltm <- NULL
# Normalising PCA dataset
df_pca <- min_max_norm(df_pca)
######################### PRINCIPAL COMPONENT ANALYSIS #########################
pc1 <- prcomp(df_pca, scale=TRUE)
df_pca.pca <- prcomp(df_pca, scale=TRUE)
summary(pc1)
print(pc1)
str(pc1)
# This shows us the eigen values. According to this, we should select 6 dimensions
# because the eigen value is greater than 1 for the first 6 dimensions. However,
# we will use 5 dimensions because they explain 60% of the variance.
cumVar <- get_eigenvalue(df_pca.pca)
varPerc <- get_eigenvalue(df_pca.pca)$variance.percent
nd = 5
# STORAGE OF THE EIGENVALUES, EIGENVECTORS AND PROJECTIONS IN THE nd DIMENSIONS
Psi = pc1$x[,1:nd] #em guardo només les rotacions que m'interessen (rotacions de les PCi seleccionades)
# STORAGE OF LABELS FOR INDIVIDUALS AND VARIABLES
iden = row.names(df_pca) #vector amb números de l'1 al 12254
etiq = names(df_pca) #noms de les variables numèriques
ze = rep(0,length(etiq)) # WE WILL NEED THIS VECTOR AFTERWARDS FOR THE GRAPHICS (vector de zeros)
# Projection of variables
Phi = cor(df_pca,Psi)
# Represent numerical variables in background
eix1 <- 1
eix2 <- 2
# Select your axis
X<-Phi[,eix1]
Y<-Phi[,eix2]
for (name in names(df)) {
# Property type
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.6, aes(color = df[name,])) +
ggtitle(paste(name, "according to PC1 and PC2")) +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red")
save(plot, paste(name, "propertyTypePlotPC1PC2", sep = ''))
}
plot
for (name in names(df)) {
# Property type
print(df[name,])
}
# Property type
print(df[name])
for (name in names(df)) {
# Property type
print(df[[name]])
}
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.6, aes(color = df[[name]])) +
ggtitle(paste(name, "according to PC1 and PC2")) +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red")
plot
plot
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.6, aes(color = df$name)) +
ggtitle(paste(name, "according to PC1 and PC2")) +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red")
plot
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.6, aes(color = df$host_since)) +
ggtitle(paste(name, "according to PC1 and PC2")) +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red")
plot
name
for (name in colnames(df)) {
# Property type
print(df[[name]])
}
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.6, aes(color = df[[name]])) +
ggtitle(paste(name, "according to PC1 and PC2")) +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red")
plot
for (name in colnames(df)) {
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.6, aes(color = df[[name]])) +
ggtitle(paste(name, "according to PC1 and PC2")) +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red")
save(plot, paste(name, "propertyTypePlotPC1PC2", sep = ''))
}
df<-read.csv('datasets/listings_D3_v8.csv')
listings <- read_csv("datasets/listings.csv")
library('ggplot2')
#install.packages('BBmisc')
library("BBmisc")
#install.packages("devtools")
#devtools::install_github("kassambara/factoextra")
library("factoextra")
#install.packages("mdatools")
library("mdatools")
df<-read.csv('datasets/listings_D3_v8.csv')
setwd("C:/Users/Liam Glennie/OneDrive - UPV/UNI/master/MVA/project/d3")
df<-read.csv('datasets/listings_D3_v8.csv')
df<-read.csv('../datasets/listings_D3_v8.csv')
############################ METHOD FOR SAVING PLOTS ###########################
save <- function(pl, fileName) {
png(filename=paste("plots2/", fileName,".png", sep = ''))
plot(pl)
dev.off()
}
############################# NORMALISATION METHOD #############################
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
######################### REMOVAL OF EXTREME OUTLIERS ##########################
df <- df[df$price < 5000, ]
df <- df[df$reviews_per_month < 60, ]
######################### PREPARING DATAFRAME FOR PCA ##########################
numeriques<-which(sapply(df,is.numeric))
df_pca<-df[,numeriques]
df_pca$price <- NULL
#removing variables detected as numeric that are actually categorical
df_pca$phone_verification <- NULL
df_pca$email_verification <- NULL
df_pca$work_email_verification <- NULL
df_pca$latitude <- NULL
df_pca$longitude <- NULL
#cor(df_pca)
# Removing strongly correlated and redundant variables
df_pca$calculated_host_listings_count_entire_homes <- NULL
df_pca$calculated_host_listings_count_private_rooms <- NULL
df_pca$calculated_host_listings_count_shared_rooms <- NULL
df_pca$review_scores_rating <- NULL
df_pca$review_scores_checkin <-NULL
df_pca$review_scores_accuracy <- NULL
df_pca$review_scores_cleanliness <-NULL
df_pca$review_scores_communication <- NULL
df_pca$review_scores_location <- NULL
df_pca$number_of_reviews_l30d <- NULL
df_pca$number_of_reviews_ltm <- NULL
# Normalising PCA dataset
df_pca <- min_max_norm(df_pca)
######################### PRINCIPAL COMPONENT ANALYSIS #########################
pc1 <- prcomp(df_pca, scale=TRUE)
df_pca.pca <- prcomp(df_pca, scale=TRUE)
# SELECTION OF THE SINGIFICANT DIMENSIONS (keep 60% of total variance)
nd = 5
# STORAGE OF THE EIGENVALUES, EIGENVECTORS AND PROJECTIONS IN THE nd DIMENSIONS
Psi = pc1$x[,1:nd] #em guardo només les rotacions que m'interessen (rotacions de les PCi seleccionades)
# STORAGE OF LABELS FOR INDIVIDUALS AND VARIABLES
iden = row.names(df_pca) #vector amb números de l'1 al 12254
etiq = names(df_pca) #noms de les variables numèriques
ze = rep(0,length(etiq)) # WE WILL NEED THIS VECTOR AFTERWARDS FOR THE GRAPHICS (vector de zeros)
# Projection of variables
Phi = cor(df_pca,Psi)
# Represent numerical variables in background
eix1 <- 1
eix2 <- 2
# Select your axis
X<-Phi[,eix1]
Y<-Phi[,eix2]
#Minimum nights
my_colors <- c("white", "black")
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.05, aes(color = df$minimum_nights >= 30)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
labs(color="30 or more minimum nights")
plot(plot)
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.05, aes(color = df$minimum_nights > 32)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = "black")
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.05, aes(color = df$minimum_nights > 32)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = "black") +
labs(color="Over 31 minimum nights")
plot(plot)
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.05, aes(color = df$minimum_nights > 32)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")) +
labs(color="Over 31 minimum nights")
plot(plot)
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.05, aes(color = df$minimum_nights >= 30)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")) +
labs(color="30 or more minimum nights")
plot(plot)
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.05, aes(fill = df$minimum_nights >= 30)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")) +
labs(color="30 or more minimum nights")
plot(plot)
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.05, aes(color = df$minimum_nights >= 30)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")) +
labs(color="30 or more minimum nights")
plot(plot)
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.05, aes(color = df$minimum_nights >= 30)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid"),
legend.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")) +
labs(color="30 or more minimum nights")
plot(plot)
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.05, aes(color = df$minimum_nights >= 30)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid"),
legend.key = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")) +
labs(color="30 or more minimum nights")
plot(plot)
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.15, aes(color = df$minimum_nights >= 30)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid"),
legend.key = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")) +
labs(color="30 or more minimum nights")
plot(plot)
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.25, aes(color = df$minimum_nights >= 30)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid"),
legend.key = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")) +
labs(color="30 or more minimum nights")
plot(plot)
save(plot, "minNights30PlotPC1PC2")
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.25, aes(color = eixample)) +
ggtitle("Listings in Eixample according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid"),
legend.key = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")) +
labs(color="In Eixample or Sant Marti")
plot(plot)
# Eixample or Sant Marti
eixampleSantMarti <- (df$neighbourhood_group_cleansed == "Eixample" | df$neighbourhood_group_cleansed == "Sant Marti")
my_colors <- c("white", "black")
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.25, aes(color = eixampleSantMarti)) +
ggtitle("Listings in Eixample or Sant Marti according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid"),
legend.key = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")) +
labs(color="In Eixample or Sant Marti")
plot(plot)
#Minimum nights
my_colors <- c("red", "green")
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.25, aes(color = df$minimum_nights >= 30)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
scale_color_manual(values = my_colors) +
labs(color="30 or more minimum nights")
plot(plot)
# Host greets
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.8, aes(color = df$hostGreets)) +
ggtitle("Listings where host greets guests according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
labs(color="Host Greets Guests")
plot(plot)
#Minimum nights
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.25, aes(color = df$minimum_nights >= 30)) +
ggtitle("Potential only long term rentals according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
labs(color="30 or more minimum nights")
plot(plot)
plot <- ggplot(data = as.data.frame(Psi), mapping = aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.25, aes(color = eixampleSantMarti)) +
ggtitle("Listings in Eixample or Sant Marti according to PC1 and PC2") +
xlab(paste("PC1 (", round(varPerc[1], digits = 2), "%)", sep = '')) +
ylab(paste("PC2 (", round(varPerc[2], digits = 2), "%)", sep = '')) +
geom_hline(yintercept=0, color = "red") +
geom_vline(xintercept=0, color = "red") +
labs(color="In Eixample or Sant Marti")
plot(plot)
library("FactoMineR")
library("factoextra")
library(readxl)
df <- read_excel("../datasets/mfa.xlsx")
res.mfa <- MFA(df,
group = c(3, 3, 1, 11, 3, 1, 3, 1),
type = c("n", "s", "n", "n", "s", "n", "s", "s"),
name.group = c("Host information categorical", "Host information numerical",
"Location of AirBnB (categorical)","Physical form (categorical)",
"Physical form (numerical)", "Booking Process (categorical)",
"Booking Process (numerical)",  "Price(numeric)" ),
num.group.sup = c(8),
graph = FALSE)
sapply(df, class)
res.mfa <- MFA(df,
group = c(3, 3, 1, 11, 3, 1, 3, 1),
type = c("n", "s", "n", "n", "s", "n", "s", "s"),
name.group = c("Host information categorical", "Host information numerical",
"Location of AirBnB (categorical)","Physical form (categorical)",
"Physical form (numerical)", "Booking Process (categorical)",
"Booking Process (numerical)",  "Price(numeric)" ),
num.group.sup = c(8),
graph = FALSE)
View(df)
df <- read_excel("../datasets/mfa2.xlsx")
sapply(df, class)
res.mfa <- MFA(df,
group = c(3, 3, 1, 11, 3, 1, 3, 1),
type = c("n", "s", "n", "n", "s", "n", "s", "s"),
name.group = c("Host information categorical", "Host information numerical",
"Location of AirBnB (categorical)","Physical form (categorical)",
"Physical form (numerical)", "Booking Process (categorical)",
"Booking Process (numerical)",  "Price(numeric)" ),
num.group.sup = c(8),
graph = FALSE)
df <- read_excel("../datasets/mfa3.xlsx")
sapply(df, class)
res.mfa <- MFA(df,
group = c(3, 3, 1, 11, 3, 1, 3, 1),
type = c("n", "s", "n", "n", "s", "n", "s", "s"),
name.group = c("Host information categorical", "Host information numerical",
"Location of AirBnB (categorical)","Physical form (categorical)",
"Physical form (numerical)", "Booking Process (categorical)",
"Booking Process (numerical)",  "Price(numeric)" ),
num.group.sup = c(8),
graph = FALSE)
print(res.mfa)
eig.val <- get_eigenvalue(res.mfa)
head(eig.val)
eig.val
fviz_screeplot(res.mfa,ncp=12)
fviz_mfa_var(res.mfa, "quanti.var", col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
col.var.sup = "violet", repel = TRUE,
geom = c("point", "text"))
--------------------------
ind <- get_mfa_ind(res.mfa)
ind
fviz_mfa_ind(res.mfa, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
View(cumVar)
View(df)
fviz_mfa_ind(res.mfa, col.ind = "df$host_total_listings_count",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_mfa_ind(res.mfa, col.ind = df$host_total_listings_count,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_mfa_ind(res.mfa, col.quali.var.sup = df$host_total_listings_count,
repel = TRUE)
fviz_mfa_quali_biplot(res.mfa, repel = FALSE, col.var = "#E7B800",
habillage = df$host_total_listings_count, addEllipses = TRUE, ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = FALSE, col.var = "#E7B800",
habillage = as.factor(df[,host_total_listings_count]), addEllipses = TRUE, ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = FALSE, col.var = "#E7B800",
habillage = as.factor(df[,"host_total_listings_count"]), addEllipses = TRUE, ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = FALSE,
habillage = as.factor(df[,"host_total_listings_count"]), addEllipses = TRUE, ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = FALSE, col.var = "#E7B800",
habillage = as.factor(df[,host_total_listings_count] > 200), addEllipses = TRUE, ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = FALSE, col.var = "#E7B800",
habillage = as.factor(df[,"host_total_listings_count"] > 200), addEllipses = TRUE, ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = FALSE, col.var = "#E7B800",
habillage = as.factor(df[,"host_total_listings_count"] > 200), ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = FALSE, col.var = "#E7B800",
habillage = as.factor(df[,"minimum_nights"] > 200), ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = FALSE, col.var = "#E7B800",
habillage = as.factor(df[,"minimum_nights"] > 31), ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = TRUE, col.var = "#E7B800",
habillage = as.factor(df[,"minimum_nights"] > 31), ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = F, col.var = "#E7B800",
habillage = as.factor(df[,"minimum_nights"] > 31), ellipse.level = 0.95)
fviz_mfa_quali_biplot(res.mfa, repel = F, col.var = "#E7B800",
habillage = as.factor(df[,"host_acceptance_rate"] < 0.5), geom = "point")
fviz_mfa_quali_biplot(res.mfa, repel = F, col.var = "#E7B800",
habillage = as.factor(df[,"host_acceptance_rate"] < 0.25), geom = "point")
fviz_mfa_quali_biplot(res.mfa, repel = F, col.var = "#E7B800",
habillage = as.factor(df[,"host_acceptance_rate"] == 0), geom = "point")
fviz_mfa_quali_biplot(res.mfa, repel = F, col.var = "#E7B800",
habillage = as.factor(df[,"host_acceptance_rate"] <= 0.2), geom = "point")
fviz_mfa_quali_biplot(res.mfa, repel = F, col.var = "#E7B800",
habillage = as.factor(df[,"host_response_rate"] <= 0.2), geom = "point")
